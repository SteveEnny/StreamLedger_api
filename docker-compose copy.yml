version: "3.9"

services:
    app:
        build:
            context: .
            dockerfile: Dockerfile
        restart: unless-stopped
        depends_on:
            - postgres
            - kafka
        volumes:
            - .:/var/www/html:delegated
            - /var/www/html/vendor

        # networks:
        #   - app-network

    postgres:
        image: postgres:15-alpine
        environment:
            POSTGRES_USER: streamledger
            POSTGRES_PASSWORD: streamledger
            POSTGRES_DB: streamledger
        ports:
            - "5432:5432"
        volumes:
            - pgdata:/var/lib/postgresql/data
        # networks:
        #   - app-network

    zookeeper:
        image: confluentinc/cp-zookeeper:7.0.1
        restart: always
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        ports:
            - "2181:2181"

        # networks:
        #   - app-network

    kafka:
        image: confluentinc/cp-kafka:7.0.1
        restart: always
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

        # networks:
        #   - app-network

    # Kafka UI Service
    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        restart: always
        depends_on:
            - kafka
        ports:
            - "8080:8080"
        environment:
            KAFKA_CLUSTERS_0_NAME: local
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
            KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

        # networks:
        #   - app-network

    nginx:
        image: nginx:stable-alpine
        container_name: laravel_nginx
        restart: unless-stopped
        ports:
            - "8000:80"
        volumes:
            - .:/var/www/html
            - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
            - /var/www/html/vendor
        depends_on:
            - app
            - postgres

    artisan:
        build:
            context: .
            dockerfile: Dockerfile
        volumes:
            - .:/var/www/html
            - /var/www/html/vendor
        entrypoint: ["php", "/var/www/html/artisan"]
volumes:
    pgdata:
# networks:
#   app-network:
#     driver: bridge
